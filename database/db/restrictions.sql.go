// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: restrictions.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

type AddServiceRestrictionIntoStagingParams struct {
	ID          uuid.UUID `json:"id"`
	ServiceID   uuid.UUID `json:"serviceId"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
}

const getCoreServiceRestrictions = `-- name: GetCoreServiceRestrictions :many
SELECT
	r.id,
	r.name,
	s.name AS service_name
FROM
	global.service_restrictions r
	JOIN global.services s ON r.service_id = s.id
WHERE
	s.type = 'core'
`

type GetCoreServiceRestrictionsRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	ServiceName string    `json:"serviceName"`
}

func (q *Queries) GetCoreServiceRestrictions(ctx context.Context) ([]GetCoreServiceRestrictionsRow, error) {
	rows, err := q.db.Query(ctx, getCoreServiceRestrictions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCoreServiceRestrictionsRow
	for rows.Next() {
		var i GetCoreServiceRestrictionsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.ServiceName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newServiceRestrictionsStagingTable = `-- name: NewServiceRestrictionsStagingTable :exec
CREATE TEMPORARY TABLE service_restrictions_staging (
	LIKE global.service_restrictions including ALL
) ON
COMMIT
DROP
`

func (q *Queries) NewServiceRestrictionsStagingTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, newServiceRestrictionsStagingTable)
	return err
}

const upsertServiceRestrictionsFromStaging = `-- name: UpsertServiceRestrictionsFromStaging :exec
INSERT INTO
	global.service_restrictions AS s (
		id,
		service_id,
		name,
		description
	)
SELECT
	id,
	service_id,
	name,
	description
FROM
	service_restrictions_staging
ON CONFLICT (id) DO UPDATE
SET
	description = excluded.description
WHERE
	s.description IS DISTINCT FROM excluded.description
`

func (q *Queries) UpsertServiceRestrictionsFromStaging(ctx context.Context) error {
	_, err := q.db.Exec(ctx, upsertServiceRestrictionsFromStaging)
	return err
}
