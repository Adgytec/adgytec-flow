// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: media.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getMediaDetails = `-- name: GetMediaDetails :many
SELECT
	id, bucket_path, size, mime_type, status, upload_type, upload_id, created_at
FROM
	global.media
WHERE
	id = ANY (
		$1::UUID[]
	)
`

func (q *Queries) GetMediaDetails(ctx context.Context, mediaIds []uuid.UUID) ([]GlobalMedia, error) {
	rows, err := q.db.Query(ctx, getMediaDetails, mediaIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GlobalMedia
	for rows.Next() {
		var i GlobalMedia
		if err := rows.Scan(
			&i.ID,
			&i.BucketPath,
			&i.Size,
			&i.MimeType,
			&i.Status,
			&i.UploadType,
			&i.UploadID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type NewMediaItemsParams struct {
	ID         uuid.UUID             `json:"id"`
	BucketPath string                `json:"bucketPath"`
	MimeType   string                `json:"mimeType"`
	UploadType GlobalMediaUploadType `json:"uploadType"`
	UploadID   *string               `json:"uploadId"`
}
