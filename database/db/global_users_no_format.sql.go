// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: global_users_no_format.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getUserById = `-- name: GetUserById :one
SELECT
	users.id, users.email, users.name, users.about, users.date_of_birth, users.created_at, users.profile_picture_id, users.status, users.uncompressed_profile_picture, users.profile_picture_size, users.profile_picture_status, users.thumbnail, users.small, users.medium, users.large, users.extra_large,
	ARRAY(
		SELECT
			id, platform_name, profile_link, user_id, created_at, updated_at
		FROM
			global.user_social_links
		WHERE
			user_id = users.id
	) AS social_links
FROM
	global.user_details AS users
WHERE
	users.id = $1::UUID
GROUP BY
	users.id
`

type GetUserByIdRow struct {
	GlobalUserDetails GlobalUserDetails `json:"globalUserDetails"`
	SocialLinks       interface{}       `json:"socialLinks"`
}

func (q *Queries) GetUserById(ctx context.Context, userID uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i GetUserByIdRow
	err := row.Scan(
		&i.GlobalUserDetails.ID,
		&i.GlobalUserDetails.Email,
		&i.GlobalUserDetails.Name,
		&i.GlobalUserDetails.About,
		&i.GlobalUserDetails.DateOfBirth,
		&i.GlobalUserDetails.CreatedAt,
		&i.GlobalUserDetails.ProfilePictureID,
		&i.GlobalUserDetails.Status,
		&i.GlobalUserDetails.UncompressedProfilePicture,
		&i.GlobalUserDetails.ProfilePictureSize,
		&i.GlobalUserDetails.ProfilePictureStatus,
		&i.GlobalUserDetails.Thumbnail,
		&i.GlobalUserDetails.Small,
		&i.GlobalUserDetails.Medium,
		&i.GlobalUserDetails.Large,
		&i.GlobalUserDetails.ExtraLarge,
		&i.SocialLinks,
	)
	return i, err
}
