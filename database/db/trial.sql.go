// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: trial.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const trial = `-- name: trial :one
SELECT
	users.id, users.email, users.name, users.about, users.date_of_birth, users.created_at, users.profile_picture_id, users.status, users.uncompressed_profile_picture, users.profile_picture_size, users.profile_picture_status, users.thumbnail, users.small, users.medium, users.large, users.extra_large
FROM
	global.user_details AS users
WHERE
	users.id = $1::UUID
GROUP BY
	users.id
`

type trialRow struct {
	GlobalUserDetails GlobalUserDetails `json:"globalUserDetails"`
}

func (q *Queries) trial(ctx context.Context, userID uuid.UUID) (trialRow, error) {
	row := q.db.QueryRow(ctx, trial, userID)
	var i trialRow
	err := row.Scan(
		&i.GlobalUserDetails.ID,
		&i.GlobalUserDetails.Email,
		&i.GlobalUserDetails.Name,
		&i.GlobalUserDetails.About,
		&i.GlobalUserDetails.DateOfBirth,
		&i.GlobalUserDetails.CreatedAt,
		&i.GlobalUserDetails.ProfilePictureID,
		&i.GlobalUserDetails.Status,
		&i.GlobalUserDetails.UncompressedProfilePicture,
		&i.GlobalUserDetails.ProfilePictureSize,
		&i.GlobalUserDetails.ProfilePictureStatus,
		&i.GlobalUserDetails.Thumbnail,
		&i.GlobalUserDetails.Small,
		&i.GlobalUserDetails.Medium,
		&i.GlobalUserDetails.Large,
		&i.GlobalUserDetails.ExtraLarge,
	)
	return i, err
}
