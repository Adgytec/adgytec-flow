// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForAddApplicationPermissionsIntoStaging implements pgx.CopyFromSource.
type iteratorForAddApplicationPermissionsIntoStaging struct {
	rows                 []AddApplicationPermissionsIntoStagingParams
	skippedFirstNextCall bool
}

func (r *iteratorForAddApplicationPermissionsIntoStaging) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForAddApplicationPermissionsIntoStaging) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].ServiceID,
		r.rows[0].Key,
		r.rows[0].Name,
		r.rows[0].Description,
		r.rows[0].RequiredResources,
		r.rows[0].AssignableActor,
	}, nil
}

func (r iteratorForAddApplicationPermissionsIntoStaging) Err() error {
	return nil
}

func (q *Queries) AddApplicationPermissionsIntoStaging(ctx context.Context, arg []AddApplicationPermissionsIntoStagingParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"application_permission_staging"}, []string{"id", "service_id", "key", "name", "description", "required_resources", "assignable_actor"}, &iteratorForAddApplicationPermissionsIntoStaging{rows: arg})
}

// iteratorForAddManagementPermissionsIntoStaging implements pgx.CopyFromSource.
type iteratorForAddManagementPermissionsIntoStaging struct {
	rows                 []AddManagementPermissionsIntoStagingParams
	skippedFirstNextCall bool
}

func (r *iteratorForAddManagementPermissionsIntoStaging) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForAddManagementPermissionsIntoStaging) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].ServiceID,
		r.rows[0].Key,
		r.rows[0].Name,
		r.rows[0].Description,
		r.rows[0].RequiredResources,
		r.rows[0].AssignableActor,
	}, nil
}

func (r iteratorForAddManagementPermissionsIntoStaging) Err() error {
	return nil
}

func (q *Queries) AddManagementPermissionsIntoStaging(ctx context.Context, arg []AddManagementPermissionsIntoStagingParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"management_permission_staging"}, []string{"id", "service_id", "key", "name", "description", "required_resources", "assignable_actor"}, &iteratorForAddManagementPermissionsIntoStaging{rows: arg})
}

// iteratorForAddMediaItems implements pgx.CopyFromSource.
type iteratorForAddMediaItems struct {
	rows                 []AddMediaItemsParams
	skippedFirstNextCall bool
}

func (r *iteratorForAddMediaItems) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForAddMediaItems) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].BucketPath,
		r.rows[0].RequiredMimeType,
		r.rows[0].UploadType,
		r.rows[0].UploadID,
	}, nil
}

func (r iteratorForAddMediaItems) Err() error {
	return nil
}

func (q *Queries) AddMediaItems(ctx context.Context, arg []AddMediaItemsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"global", "media"}, []string{"id", "bucket_path", "required_mime_type", "upload_type", "upload_id"}, &iteratorForAddMediaItems{rows: arg})
}

// iteratorForAddServicesIntoStaging implements pgx.CopyFromSource.
type iteratorForAddServicesIntoStaging struct {
	rows                 []AddServicesIntoStagingParams
	skippedFirstNextCall bool
}

func (r *iteratorForAddServicesIntoStaging) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForAddServicesIntoStaging) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Name,
		r.rows[0].Description,
		r.rows[0].Type,
	}, nil
}

func (r iteratorForAddServicesIntoStaging) Err() error {
	return nil
}

func (q *Queries) AddServicesIntoStaging(ctx context.Context, arg []AddServicesIntoStagingParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"services_staging"}, []string{"id", "name", "description", "type"}, &iteratorForAddServicesIntoStaging{rows: arg})
}
