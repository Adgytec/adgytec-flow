// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: permission.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

type AddApplicationPermissionsIntoStagingParams struct {
	ID                uuid.UUID                 `json:"id"`
	ServiceID         uuid.UUID                 `json:"serviceId"`
	Key               string                    `json:"key"`
	Name              string                    `json:"name"`
	Description       *string                   `json:"description"`
	RequiredResources []string                  `json:"requiredResources"`
	AssignableActor   GlobalAssignableActorType `json:"assignableActor"`
}

type AddManagementPermissionsIntoStagingParams struct {
	ID                uuid.UUID                 `json:"id"`
	ServiceID         uuid.UUID                 `json:"serviceId"`
	Key               string                    `json:"key"`
	Name              string                    `json:"name"`
	Description       *string                   `json:"description"`
	RequiredResources []string                  `json:"requiredResources"`
	AssignableActor   GlobalAssignableActorType `json:"assignableActor"`
}

const newApplicationPermissionStagingTable = `-- name: NewApplicationPermissionStagingTable :exec
CREATE TEMPORARY TABLE application_permission_staging (
	LIKE application.permissions including ALL
) ON
COMMIT
DROP
`

func (q *Queries) NewApplicationPermissionStagingTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, newApplicationPermissionStagingTable)
	return err
}

const newManagementPermissionStagingTable = `-- name: NewManagementPermissionStagingTable :exec
CREATE TEMPORARY TABLE management_permission_staging (
	LIKE management.permissions including ALL
) ON
COMMIT
DROP
`

func (q *Queries) NewManagementPermissionStagingTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, newManagementPermissionStagingTable)
	return err
}

const upsertApplicationPermissionsFromStaging = `-- name: UpsertApplicationPermissionsFromStaging :exec
INSERT INTO
	application.permissions AS p (
		id,
		service_id,
		key,
		name,
		description,
		required_resources,
		assignable_actor
	)
SELECT
	id,
	service_id,
	key,
	name,
	description,
	required_resources,
	assignable_actor
FROM
	application_permission_staging
ON CONFLICT (id) DO UPDATE
SET
	name = excluded.name,
	description = excluded.description,
	assignable_actor = excluded.assignable_actor,
	required_resources = excluded.required_resources
WHERE
	p.name IS DISTINCT FROM excluded.name
	OR p.description IS DISTINCT FROM excluded.description
	OR p.assignable_actor IS DISTINCT FROM excluded.assignable_actor
	OR p.required_resources IS DISTINCT FROM excluded.required_resources
`

func (q *Queries) UpsertApplicationPermissionsFromStaging(ctx context.Context) error {
	_, err := q.db.Exec(ctx, upsertApplicationPermissionsFromStaging)
	return err
}

const upsertManagementPermissionsFromStaging = `-- name: UpsertManagementPermissionsFromStaging :exec
INSERT INTO
	management.permissions AS p (
		id,
		service_id,
		key,
		name,
		description,
		required_resources,
		assignable_actor
	)
SELECT
	id,
	service_id,
	key,
	name,
	description,
	required_resources,
	assignable_actor
FROM
	management_permission_staging
ON CONFLICT (id) DO UPDATE
SET
	name = excluded.name,
	description = excluded.description,
	assignable_actor = excluded.assignable_actor,
	required_resources = excluded.required_resources
WHERE
	p.name IS DISTINCT FROM excluded.name
	OR p.description IS DISTINCT FROM excluded.description
	OR p.assignable_actor IS DISTINCT FROM excluded.assignable_actor
	OR p.required_resources IS DISTINCT FROM excluded.required_resources
`

func (q *Queries) UpsertManagementPermissionsFromStaging(ctx context.Context) error {
	_, err := q.db.Exec(ctx, upsertManagementPermissionsFromStaging)
	return err
}
