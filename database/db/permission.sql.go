// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: permission.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addApplicationPermission = `-- name: AddApplicationPermission :exec
INSERT INTO
	application.permissions (
		id,
		service_id,
		key,
		name,
		description,
		required_resources,
		assignable_actor
	)
VALUES
	(
		$1,
		$2,
		$3,
		$4,
		$5,
		$6,
		$7
	)
ON CONFLICT (key) DO UPDATE
SET
	name = excluded.name,
	description = excluded.description,
	assignable_actor = excluded.assignable_actor
`

type AddApplicationPermissionParams struct {
	ID                uuid.UUID                 `json:"id"`
	ServiceID         uuid.UUID                 `json:"serviceId"`
	Key               string                    `json:"key"`
	Name              string                    `json:"name"`
	Description       *string                   `json:"description"`
	RequiredResources []string                  `json:"requiredResources"`
	AssignableActor   GlobalAssignableActorType `json:"assignableActor"`
}

func (q *Queries) AddApplicationPermission(ctx context.Context, arg AddApplicationPermissionParams) error {
	_, err := q.db.Exec(ctx, addApplicationPermission,
		arg.ID,
		arg.ServiceID,
		arg.Key,
		arg.Name,
		arg.Description,
		arg.RequiredResources,
		arg.AssignableActor,
	)
	return err
}

const addManagementPermission = `-- name: AddManagementPermission :exec
INSERT INTO
	management.permissions (
		id,
		service_id,
		key,
		name,
		description,
		required_resources,
		assignable_actor
	)
VALUES
	(
		$1,
		$2,
		$3,
		$4,
		$5,
		$6,
		$7
	)
ON CONFLICT (key) DO UPDATE
SET
	name = excluded.name,
	description = excluded.description,
	assignable_actor = excluded.assignable_actor
`

type AddManagementPermissionParams struct {
	ID                uuid.UUID                 `json:"id"`
	ServiceID         uuid.UUID                 `json:"serviceId"`
	Key               string                    `json:"key"`
	Name              string                    `json:"name"`
	Description       *string                   `json:"description"`
	RequiredResources []string                  `json:"requiredResources"`
	AssignableActor   GlobalAssignableActorType `json:"assignableActor"`
}

func (q *Queries) AddManagementPermission(ctx context.Context, arg AddManagementPermissionParams) error {
	_, err := q.db.Exec(ctx, addManagementPermission,
		arg.ID,
		arg.ServiceID,
		arg.Key,
		arg.Name,
		arg.Description,
		arg.RequiredResources,
		arg.AssignableActor,
	)
	return err
}
