// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_group.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getUserGroupByIDForUpdate = `-- name: GetUserGroupByIDForUpdate :one
SELECT
	id,
	name,
	description,
	created_at
FROM
	management.user_groups
WHERE
	id = $1
FOR UPDATE
`

type GetUserGroupByIDForUpdateRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
}

func (q *Queries) GetUserGroupByIDForUpdate(ctx context.Context, id uuid.UUID) (GetUserGroupByIDForUpdateRow, error) {
	row := q.db.QueryRow(ctx, getUserGroupByIDForUpdate, id)
	var i GetUserGroupByIDForUpdateRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getUserGroupsByQuery = `-- name: GetUserGroupsByQuery :many
SELECT
	id, name, description, created_at, user_count
FROM
	management.user_group_details
WHERE
	lower(name) LIKE lower(
		$2::TEXT
	) || '%'
ORDER BY
	created_at DESC
LIMIT
	$1
`

type GetUserGroupsByQueryParams struct {
	Limit int32  `json:"limit"`
	Query string `json:"query"`
}

func (q *Queries) GetUserGroupsByQuery(ctx context.Context, arg GetUserGroupsByQueryParams) ([]ManagementUserGroupDetails, error) {
	rows, err := q.db.Query(ctx, getUserGroupsByQuery, arg.Limit, arg.Query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ManagementUserGroupDetails
	for rows.Next() {
		var i ManagementUserGroupDetails
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UserCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGroupsLatestFirst = `-- name: GetUserGroupsLatestFirst :many
SELECT
	id, name, description, created_at, user_count
FROM
	management.user_group_details
ORDER BY
	created_at DESC
LIMIT
	$1
`

func (q *Queries) GetUserGroupsLatestFirst(ctx context.Context, limit int32) ([]ManagementUserGroupDetails, error) {
	rows, err := q.db.Query(ctx, getUserGroupsLatestFirst, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ManagementUserGroupDetails
	for rows.Next() {
		var i ManagementUserGroupDetails
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UserCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGroupsLatestFirstGreaterThanCursor = `-- name: GetUserGroupsLatestFirstGreaterThanCursor :many
SELECT
	id, name, description, created_at, user_count
FROM
	management.user_group_details
WHERE
	created_at > $2::TIMESTAMPTZ
ORDER BY
	created_at DESC
LIMIT
	$1
`

type GetUserGroupsLatestFirstGreaterThanCursorParams struct {
	Limit  int32     `json:"limit"`
	Cursor time.Time `json:"cursor"`
}

func (q *Queries) GetUserGroupsLatestFirstGreaterThanCursor(ctx context.Context, arg GetUserGroupsLatestFirstGreaterThanCursorParams) ([]ManagementUserGroupDetails, error) {
	rows, err := q.db.Query(ctx, getUserGroupsLatestFirstGreaterThanCursor, arg.Limit, arg.Cursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ManagementUserGroupDetails
	for rows.Next() {
		var i ManagementUserGroupDetails
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UserCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGroupsLatestFirstLesserThanCursor = `-- name: GetUserGroupsLatestFirstLesserThanCursor :many
SELECT
	id, name, description, created_at, user_count
FROM
	management.user_group_details
WHERE
	created_at < $2::TIMESTAMPTZ
ORDER BY
	created_at DESC
LIMIT
	$1
`

type GetUserGroupsLatestFirstLesserThanCursorParams struct {
	Limit  int32     `json:"limit"`
	Cursor time.Time `json:"cursor"`
}

func (q *Queries) GetUserGroupsLatestFirstLesserThanCursor(ctx context.Context, arg GetUserGroupsLatestFirstLesserThanCursorParams) ([]ManagementUserGroupDetails, error) {
	rows, err := q.db.Query(ctx, getUserGroupsLatestFirstLesserThanCursor, arg.Limit, arg.Cursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ManagementUserGroupDetails
	for rows.Next() {
		var i ManagementUserGroupDetails
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UserCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGroupsOldestFirst = `-- name: GetUserGroupsOldestFirst :many
SELECT
	id, name, description, created_at, user_count
FROM
	management.user_group_details
ORDER BY
	created_at ASC
LIMIT
	$1
`

func (q *Queries) GetUserGroupsOldestFirst(ctx context.Context, limit int32) ([]ManagementUserGroupDetails, error) {
	rows, err := q.db.Query(ctx, getUserGroupsOldestFirst, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ManagementUserGroupDetails
	for rows.Next() {
		var i ManagementUserGroupDetails
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UserCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGroupsOldestFirstGreaterThanCursor = `-- name: GetUserGroupsOldestFirstGreaterThanCursor :many
SELECT
	id, name, description, created_at, user_count
FROM
	management.user_group_details
WHERE
	created_at > $2::TIMESTAMPTZ
ORDER BY
	created_at ASC
LIMIT
	$1
`

type GetUserGroupsOldestFirstGreaterThanCursorParams struct {
	Limit  int32     `json:"limit"`
	Cursor time.Time `json:"cursor"`
}

func (q *Queries) GetUserGroupsOldestFirstGreaterThanCursor(ctx context.Context, arg GetUserGroupsOldestFirstGreaterThanCursorParams) ([]ManagementUserGroupDetails, error) {
	rows, err := q.db.Query(ctx, getUserGroupsOldestFirstGreaterThanCursor, arg.Limit, arg.Cursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ManagementUserGroupDetails
	for rows.Next() {
		var i ManagementUserGroupDetails
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UserCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGroupsOldestFirstLesserThanCursor = `-- name: GetUserGroupsOldestFirstLesserThanCursor :many
SELECT
	id, name, description, created_at, user_count
FROM
	management.user_group_details
WHERE
	created_at < $2::TIMESTAMPTZ
ORDER BY
	created_at ASC
LIMIT
	$1
`

type GetUserGroupsOldestFirstLesserThanCursorParams struct {
	Limit  int32     `json:"limit"`
	Cursor time.Time `json:"cursor"`
}

func (q *Queries) GetUserGroupsOldestFirstLesserThanCursor(ctx context.Context, arg GetUserGroupsOldestFirstLesserThanCursorParams) ([]ManagementUserGroupDetails, error) {
	rows, err := q.db.Query(ctx, getUserGroupsOldestFirstLesserThanCursor, arg.Limit, arg.Cursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ManagementUserGroupDetails
	for rows.Next() {
		var i ManagementUserGroupDetails
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UserCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newUserGroup = `-- name: NewUserGroup :one
INSERT INTO
	management.user_groups (name, description)
VALUES
	($1, $2)
RETURNING
	id,
	name,
	description,
	created_at
`

type NewUserGroupParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

type NewUserGroupRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
}

func (q *Queries) NewUserGroup(ctx context.Context, arg NewUserGroupParams) (NewUserGroupRow, error) {
	row := q.db.QueryRow(ctx, newUserGroup, arg.Name, arg.Description)
	var i NewUserGroupRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const removeUserGroup = `-- name: RemoveUserGroup :exec
DELETE FROM management.user_groups
WHERE
	id = $1
`

func (q *Queries) RemoveUserGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeUserGroup, id)
	return err
}

const updateUserGroup = `-- name: UpdateUserGroup :one
UPDATE management.user_groups
SET
	name = $1,
	description = $2
WHERE
	id = $3
RETURNING
	id,
	name,
	description,
	created_at
`

type UpdateUserGroupParams struct {
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	ID          uuid.UUID `json:"id"`
}

type UpdateUserGroupRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
}

func (q *Queries) UpdateUserGroup(ctx context.Context, arg UpdateUserGroupParams) (UpdateUserGroupRow, error) {
	row := q.db.QueryRow(ctx, updateUserGroup, arg.Name, arg.Description, arg.ID)
	var i UpdateUserGroupRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
