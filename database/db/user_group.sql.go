// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_group.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getUserGroupByID = `-- name: GetUserGroupByID :one
SELECT
	id,
	name,
	description,
	created_at
FROM
	management.user_groups
WHERE
	id = $1
`

type GetUserGroupByIDRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
}

func (q *Queries) GetUserGroupByID(ctx context.Context, id uuid.UUID) (GetUserGroupByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserGroupByID, id)
	var i GetUserGroupByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const newUserGroup = `-- name: NewUserGroup :one
INSERT INTO
	management.user_groups (name, description)
VALUES
	($1, $2)
RETURNING
	id,
	name,
	description,
	created_at
`

type NewUserGroupParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

type NewUserGroupRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
}

func (q *Queries) NewUserGroup(ctx context.Context, arg NewUserGroupParams) (NewUserGroupRow, error) {
	row := q.db.QueryRow(ctx, newUserGroup, arg.Name, arg.Description)
	var i NewUserGroupRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserGroup = `-- name: UpdateUserGroup :one
UPDATE management.user_groups
SET
	name = $1,
	description = $2
WHERE
	id = $3
RETURNING
	id,
	name,
	description,
	created_at
`

type UpdateUserGroupParams struct {
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	ID          uuid.UUID `json:"id"`
}

type UpdateUserGroupRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
}

func (q *Queries) UpdateUserGroup(ctx context.Context, arg UpdateUserGroupParams) (UpdateUserGroupRow, error) {
	row := q.db.QueryRow(ctx, updateUserGroup, arg.Name, arg.Description, arg.ID)
	var i UpdateUserGroupRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
