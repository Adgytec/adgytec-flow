// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: global_users.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createGlobalUser = `-- name: CreateGlobalUser :execrows
INSERT INTO
	global.users (id, email)
VALUES
	($1, $2)
ON CONFLICT (id) DO NOTHING
`

type CreateGlobalUserParams struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
}

func (q *Queries) CreateGlobalUser(ctx context.Context, arg CreateGlobalUserParams) (int64, error) {
	result, err := q.db.Exec(ctx, createGlobalUser, arg.ID, arg.Email)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getGlobalUsersByQuery = `-- name: GetGlobalUsersByQuery :many
SELECT
	id, email, name, about, date_of_birth, created_at, profile_picture_id, status, uncompressed_profile_picture, profile_picture_size, profile_picture_status, thumbnail, small, medium, large, extra_large
FROM
	global.user_details
WHERE
	normalized_name ILIKE '%' || unaccent (
		$2::TEXT
	) || '%'
	OR normalized_email ILIKE '%' || unaccent (
		$2::TEXT
	) || '%'
ORDER BY
	created_at DESC
LIMIT
	$1
`

type GetGlobalUsersByQueryParams struct {
	Limit int32  `json:"limit"`
	Query string `json:"query"`
}

func (q *Queries) GetGlobalUsersByQuery(ctx context.Context, arg GetGlobalUsersByQueryParams) ([]GlobalUserDetails, error) {
	rows, err := q.db.Query(ctx, getGlobalUsersByQuery, arg.Limit, arg.Query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GlobalUserDetails
	for rows.Next() {
		var i GlobalUserDetails
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.About,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.ProfilePictureID,
			&i.Status,
			&i.UncompressedProfilePicture,
			&i.ProfilePictureSize,
			&i.ProfilePictureStatus,
			&i.Thumbnail,
			&i.Small,
			&i.Medium,
			&i.Large,
			&i.ExtraLarge,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalUsersLatestFirst = `-- name: GetGlobalUsersLatestFirst :many
SELECT
	id, email, name, about, date_of_birth, created_at, profile_picture_id, status, uncompressed_profile_picture, profile_picture_size, profile_picture_status, thumbnail, small, medium, large, extra_large
FROM
	global.user_details
ORDER BY
	created_at DESC
LIMIT
	$1
`

func (q *Queries) GetGlobalUsersLatestFirst(ctx context.Context, limit int32) ([]GlobalUserDetails, error) {
	rows, err := q.db.Query(ctx, getGlobalUsersLatestFirst, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GlobalUserDetails
	for rows.Next() {
		var i GlobalUserDetails
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.About,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.ProfilePictureID,
			&i.Status,
			&i.UncompressedProfilePicture,
			&i.ProfilePictureSize,
			&i.ProfilePictureStatus,
			&i.Thumbnail,
			&i.Small,
			&i.Medium,
			&i.Large,
			&i.ExtraLarge,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalUsersLatestFirstGreaterThanCursor = `-- name: GetGlobalUsersLatestFirstGreaterThanCursor :many
SELECT
	id, email, name, about, date_of_birth, created_at, profile_picture_id, status, uncompressed_profile_picture, profile_picture_size, profile_picture_status, thumbnail, small, medium, large, extra_large
FROM
	global.user_details
WHERE
	created_at > $2::TIMESTAMPTZ
ORDER BY
	created_at DESC
LIMIT
	$1
`

type GetGlobalUsersLatestFirstGreaterThanCursorParams struct {
	Limit  int32     `json:"limit"`
	Cursor time.Time `json:"cursor"`
}

func (q *Queries) GetGlobalUsersLatestFirstGreaterThanCursor(ctx context.Context, arg GetGlobalUsersLatestFirstGreaterThanCursorParams) ([]GlobalUserDetails, error) {
	rows, err := q.db.Query(ctx, getGlobalUsersLatestFirstGreaterThanCursor, arg.Limit, arg.Cursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GlobalUserDetails
	for rows.Next() {
		var i GlobalUserDetails
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.About,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.ProfilePictureID,
			&i.Status,
			&i.UncompressedProfilePicture,
			&i.ProfilePictureSize,
			&i.ProfilePictureStatus,
			&i.Thumbnail,
			&i.Small,
			&i.Medium,
			&i.Large,
			&i.ExtraLarge,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalUsersLatestFirstLesserThanCursor = `-- name: GetGlobalUsersLatestFirstLesserThanCursor :many
SELECT
	id, email, name, about, date_of_birth, created_at, profile_picture_id, status, uncompressed_profile_picture, profile_picture_size, profile_picture_status, thumbnail, small, medium, large, extra_large
FROM
	global.user_details
WHERE
	created_at < $2::TIMESTAMPTZ
ORDER BY
	created_at DESC
LIMIT
	$1
`

type GetGlobalUsersLatestFirstLesserThanCursorParams struct {
	Limit  int32     `json:"limit"`
	Cursor time.Time `json:"cursor"`
}

func (q *Queries) GetGlobalUsersLatestFirstLesserThanCursor(ctx context.Context, arg GetGlobalUsersLatestFirstLesserThanCursorParams) ([]GlobalUserDetails, error) {
	rows, err := q.db.Query(ctx, getGlobalUsersLatestFirstLesserThanCursor, arg.Limit, arg.Cursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GlobalUserDetails
	for rows.Next() {
		var i GlobalUserDetails
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.About,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.ProfilePictureID,
			&i.Status,
			&i.UncompressedProfilePicture,
			&i.ProfilePictureSize,
			&i.ProfilePictureStatus,
			&i.Thumbnail,
			&i.Small,
			&i.Medium,
			&i.Large,
			&i.ExtraLarge,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalUsersOldestFirst = `-- name: GetGlobalUsersOldestFirst :many
SELECT
	id, email, name, about, date_of_birth, created_at, profile_picture_id, status, uncompressed_profile_picture, profile_picture_size, profile_picture_status, thumbnail, small, medium, large, extra_large
FROM
	global.user_details
ORDER BY
	created_at ASC
LIMIT
	$1
`

func (q *Queries) GetGlobalUsersOldestFirst(ctx context.Context, limit int32) ([]GlobalUserDetails, error) {
	rows, err := q.db.Query(ctx, getGlobalUsersOldestFirst, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GlobalUserDetails
	for rows.Next() {
		var i GlobalUserDetails
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.About,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.ProfilePictureID,
			&i.Status,
			&i.UncompressedProfilePicture,
			&i.ProfilePictureSize,
			&i.ProfilePictureStatus,
			&i.Thumbnail,
			&i.Small,
			&i.Medium,
			&i.Large,
			&i.ExtraLarge,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalUsersOldestFirstGreaterThanCursor = `-- name: GetGlobalUsersOldestFirstGreaterThanCursor :many
SELECT
	id, email, name, about, date_of_birth, created_at, profile_picture_id, status, uncompressed_profile_picture, profile_picture_size, profile_picture_status, thumbnail, small, medium, large, extra_large
FROM
	global.user_details
WHERE
	created_at > $2::TIMESTAMPTZ
ORDER BY
	created_at ASC
LIMIT
	$1
`

type GetGlobalUsersOldestFirstGreaterThanCursorParams struct {
	Limit  int32     `json:"limit"`
	Cursor time.Time `json:"cursor"`
}

func (q *Queries) GetGlobalUsersOldestFirstGreaterThanCursor(ctx context.Context, arg GetGlobalUsersOldestFirstGreaterThanCursorParams) ([]GlobalUserDetails, error) {
	rows, err := q.db.Query(ctx, getGlobalUsersOldestFirstGreaterThanCursor, arg.Limit, arg.Cursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GlobalUserDetails
	for rows.Next() {
		var i GlobalUserDetails
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.About,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.ProfilePictureID,
			&i.Status,
			&i.UncompressedProfilePicture,
			&i.ProfilePictureSize,
			&i.ProfilePictureStatus,
			&i.Thumbnail,
			&i.Small,
			&i.Medium,
			&i.Large,
			&i.ExtraLarge,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalUsersOldestFirstLesserThanCursor = `-- name: GetGlobalUsersOldestFirstLesserThanCursor :many
SELECT
	id, email, name, about, date_of_birth, created_at, profile_picture_id, status, uncompressed_profile_picture, profile_picture_size, profile_picture_status, thumbnail, small, medium, large, extra_large
FROM
	global.user_details
WHERE
	created_at < $2::TIMESTAMPTZ
ORDER BY
	created_at ASC
LIMIT
	$1
`

type GetGlobalUsersOldestFirstLesserThanCursorParams struct {
	Limit  int32     `json:"limit"`
	Cursor time.Time `json:"cursor"`
}

func (q *Queries) GetGlobalUsersOldestFirstLesserThanCursor(ctx context.Context, arg GetGlobalUsersOldestFirstLesserThanCursorParams) ([]GlobalUserDetails, error) {
	rows, err := q.db.Query(ctx, getGlobalUsersOldestFirstLesserThanCursor, arg.Limit, arg.Cursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GlobalUserDetails
	for rows.Next() {
		var i GlobalUserDetails
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.About,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.ProfilePictureID,
			&i.Status,
			&i.UncompressedProfilePicture,
			&i.ProfilePictureSize,
			&i.ProfilePictureStatus,
			&i.Thumbnail,
			&i.Small,
			&i.Medium,
			&i.Large,
			&i.ExtraLarge,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT
	id, email, name, about, date_of_birth, created_at, profile_picture_id, status, uncompressed_profile_picture, profile_picture_size, profile_picture_status, thumbnail, small, medium, large, extra_large
FROM
	global.user_details
WHERE
	id = $1::UUID
`

func (q *Queries) GetUserById(ctx context.Context, userID uuid.UUID) (GlobalUserDetails, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i GlobalUserDetails
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.About,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.ProfilePictureID,
		&i.Status,
		&i.UncompressedProfilePicture,
		&i.ProfilePictureSize,
		&i.ProfilePictureStatus,
		&i.Thumbnail,
		&i.Small,
		&i.Medium,
		&i.Large,
		&i.ExtraLarge,
	)
	return i, err
}

const updateGlobalUserProfile = `-- name: UpdateGlobalUserProfile :one
WITH
	updated AS (
		UPDATE global.users u
		SET
			name = $1,
			about = $2,
			profile_picture_id = $3,
			date_of_birth = $4
		WHERE
			u.id = $5
		RETURNING
			u.id
	)
SELECT
	id, email, name, about, date_of_birth, created_at, profile_picture_id, status, uncompressed_profile_picture, profile_picture_size, profile_picture_status, thumbnail, small, medium, large, extra_large
FROM
	global.user_details d
WHERE
	d.id = $5
`

type UpdateGlobalUserProfileParams struct {
	Name             *string     `json:"name"`
	About            *string     `json:"about"`
	ProfilePictureID *uuid.UUID  `json:"profilePictureId"`
	DateOfBirth      pgtype.Date `json:"dateOfBirth"`
	ID               uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateGlobalUserProfile(ctx context.Context, arg UpdateGlobalUserProfileParams) (GlobalUserDetails, error) {
	row := q.db.QueryRow(ctx, updateGlobalUserProfile,
		arg.Name,
		arg.About,
		arg.ProfilePictureID,
		arg.DateOfBirth,
		arg.ID,
	)
	var i GlobalUserDetails
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.About,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.ProfilePictureID,
		&i.Status,
		&i.UncompressedProfilePicture,
		&i.ProfilePictureSize,
		&i.ProfilePictureStatus,
		&i.Thumbnail,
		&i.Small,
		&i.Medium,
		&i.Large,
		&i.ExtraLarge,
	)
	return i, err
}

const updateGlobalUserStatus = `-- name: UpdateGlobalUserStatus :exec
UPDATE global.users
SET
	status = $1
WHERE
	id = $2
`

type UpdateGlobalUserStatusParams struct {
	Status GlobalUserStatus `json:"status"`
	ID     uuid.UUID        `json:"id"`
}

func (q *Queries) UpdateGlobalUserStatus(ctx context.Context, arg UpdateGlobalUserStatusParams) error {
	_, err := q.db.Exec(ctx, updateGlobalUserStatus, arg.Status, arg.ID)
	return err
}
