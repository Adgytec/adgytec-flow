// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package db_actions

import (
	"context"
)

// iteratorForAddApplicationPermissions implements pgx.CopyFromSource.
type iteratorForAddApplicationPermissions struct {
	rows                 []AddApplicationPermissionsParams
	skippedFirstNextCall bool
}

func (r *iteratorForAddApplicationPermissions) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForAddApplicationPermissions) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Key,
		r.rows[0].ServiceName,
		r.rows[0].Name,
		r.rows[0].Description,
		r.rows[0].RequiredResources,
	}, nil
}

func (r iteratorForAddApplicationPermissions) Err() error {
	return nil
}

func (q *Queries) AddApplicationPermissions(ctx context.Context, arg []AddApplicationPermissionsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"application", "permissions"}, []string{"key", "service_name", "name", "description", "required_resources"}, &iteratorForAddApplicationPermissions{rows: arg})
}

// iteratorForAddManagementPermissions implements pgx.CopyFromSource.
type iteratorForAddManagementPermissions struct {
	rows                 []AddManagementPermissionsParams
	skippedFirstNextCall bool
}

func (r *iteratorForAddManagementPermissions) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForAddManagementPermissions) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Key,
		r.rows[0].ServiceName,
		r.rows[0].Name,
		r.rows[0].Description,
		r.rows[0].RequiredResources,
	}, nil
}

func (r iteratorForAddManagementPermissions) Err() error {
	return nil
}

func (q *Queries) AddManagementPermissions(ctx context.Context, arg []AddManagementPermissionsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"management", "permissions"}, []string{"key", "service_name", "name", "description", "required_resources"}, &iteratorForAddManagementPermissions{rows: arg})
}
