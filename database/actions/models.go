// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db_actions

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ApplicationPermissionResourceType string

const (
	ApplicationPermissionResourceTypeProject          ApplicationPermissionResourceType = "project"
	ApplicationPermissionResourceTypeLogcialPartition ApplicationPermissionResourceType = "logcial-partition"
	ApplicationPermissionResourceTypeServiceItem      ApplicationPermissionResourceType = "service-item"
)

func (e *ApplicationPermissionResourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApplicationPermissionResourceType(s)
	case string:
		*e = ApplicationPermissionResourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for ApplicationPermissionResourceType: %T", src)
	}
	return nil
}

type NullApplicationPermissionResourceType struct {
	ApplicationPermissionResourceType ApplicationPermissionResourceType `json:"application_permission_resource_type"`
	Valid                             bool                              `json:"valid"` // Valid is true if ApplicationPermissionResourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApplicationPermissionResourceType) Scan(value interface{}) error {
	if value == nil {
		ns.ApplicationPermissionResourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApplicationPermissionResourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApplicationPermissionResourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApplicationPermissionResourceType), nil
}

type GlobalServiceHierarchyResult string

const (
	GlobalServiceHierarchyResultHierarchy GlobalServiceHierarchyResult = "hierarchy"
	GlobalServiceHierarchyResultItem      GlobalServiceHierarchyResult = "item"
)

func (e *GlobalServiceHierarchyResult) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GlobalServiceHierarchyResult(s)
	case string:
		*e = GlobalServiceHierarchyResult(s)
	default:
		return fmt.Errorf("unsupported scan type for GlobalServiceHierarchyResult: %T", src)
	}
	return nil
}

type NullGlobalServiceHierarchyResult struct {
	GlobalServiceHierarchyResult GlobalServiceHierarchyResult `json:"global_service_hierarchy_result"`
	Valid                        bool                         `json:"valid"` // Valid is true if GlobalServiceHierarchyResult is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGlobalServiceHierarchyResult) Scan(value interface{}) error {
	if value == nil {
		ns.GlobalServiceHierarchyResult, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GlobalServiceHierarchyResult.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGlobalServiceHierarchyResult) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GlobalServiceHierarchyResult), nil
}

type GlobalServiceHierarchyType string

const (
	GlobalServiceHierarchyTypeLevel GlobalServiceHierarchyType = "level"
	GlobalServiceHierarchyTypeTree  GlobalServiceHierarchyType = "tree"
)

func (e *GlobalServiceHierarchyType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GlobalServiceHierarchyType(s)
	case string:
		*e = GlobalServiceHierarchyType(s)
	default:
		return fmt.Errorf("unsupported scan type for GlobalServiceHierarchyType: %T", src)
	}
	return nil
}

type NullGlobalServiceHierarchyType struct {
	GlobalServiceHierarchyType GlobalServiceHierarchyType `json:"global_service_hierarchy_type"`
	Valid                      bool                       `json:"valid"` // Valid is true if GlobalServiceHierarchyType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGlobalServiceHierarchyType) Scan(value interface{}) error {
	if value == nil {
		ns.GlobalServiceHierarchyType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GlobalServiceHierarchyType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGlobalServiceHierarchyType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GlobalServiceHierarchyType), nil
}

type GlobalServiceLogicalPartitionType string

const (
	GlobalServiceLogicalPartitionTypeHierarchy GlobalServiceLogicalPartitionType = "hierarchy"
	GlobalServiceLogicalPartitionTypeNone      GlobalServiceLogicalPartitionType = "none"
)

func (e *GlobalServiceLogicalPartitionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GlobalServiceLogicalPartitionType(s)
	case string:
		*e = GlobalServiceLogicalPartitionType(s)
	default:
		return fmt.Errorf("unsupported scan type for GlobalServiceLogicalPartitionType: %T", src)
	}
	return nil
}

type NullGlobalServiceLogicalPartitionType struct {
	GlobalServiceLogicalPartitionType GlobalServiceLogicalPartitionType `json:"global_service_logical_partition_type"`
	Valid                             bool                              `json:"valid"` // Valid is true if GlobalServiceLogicalPartitionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGlobalServiceLogicalPartitionType) Scan(value interface{}) error {
	if value == nil {
		ns.GlobalServiceLogicalPartitionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GlobalServiceLogicalPartitionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGlobalServiceLogicalPartitionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GlobalServiceLogicalPartitionType), nil
}

type ManagementPermissionResourceType string

const (
	ManagementPermissionResourceTypeOrganization ManagementPermissionResourceType = "organization"
)

func (e *ManagementPermissionResourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ManagementPermissionResourceType(s)
	case string:
		*e = ManagementPermissionResourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for ManagementPermissionResourceType: %T", src)
	}
	return nil
}

type NullManagementPermissionResourceType struct {
	ManagementPermissionResourceType ManagementPermissionResourceType `json:"management_permission_resource_type"`
	Valid                            bool                             `json:"valid"` // Valid is true if ManagementPermissionResourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullManagementPermissionResourceType) Scan(value interface{}) error {
	if value == nil {
		ns.ManagementPermissionResourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ManagementPermissionResourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullManagementPermissionResourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ManagementPermissionResourceType), nil
}

type ApplicationPermission struct {
	Key               string                              `json:"key"`
	ServiceName       string                              `json:"service_name"`
	Name              string                              `json:"name"`
	Description       pgtype.Text                         `json:"description"`
	RequiredResources []ApplicationPermissionResourceType `json:"required_resources"`
	CreatedAt         pgtype.Timestamptz                  `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz                  `json:"updated_at"`
}

type ArchiveDeletedRecord struct {
	ID        pgtype.UUID        `json:"id"`
	TableName string             `json:"table_name"`
	Record    []byte             `json:"record"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type GlobalService struct {
	Name             string                            `json:"name"`
	Assignable       bool                              `json:"assignable"`
	LogicalPartition GlobalServiceLogicalPartitionType `json:"logical_partition"`
	CreatedAt        pgtype.Timestamptz                `json:"created_at"`
}

type GlobalServiceHierarchyDetail struct {
	ServiceName     string                       `json:"service_name"`
	HierarchyName   string                       `json:"hierarchy_name"`
	HierarchyType   GlobalServiceHierarchyType   `json:"hierarchy_type"`
	HierarchyResult GlobalServiceHierarchyResult `json:"hierarchy_result"`
}

type ManagementPermission struct {
	Key               string                             `json:"key"`
	ServiceName       string                             `json:"service_name"`
	Name              string                             `json:"name"`
	Description       pgtype.Text                        `json:"description"`
	RequiredResources []ManagementPermissionResourceType `json:"required_resources"`
	CreatedAt         pgtype.Timestamptz                 `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz                 `json:"updated_at"`
}
