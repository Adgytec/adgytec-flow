// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db_actions

import (
	"database/sql/driver"
	"fmt"

	"github.com/Adgytec/adgytec-flow/database/models"
	"github.com/jackc/pgx/v5/pgtype"
)

type ApplicationPermissionResourceType string

const (
	ApplicationPermissionResourceTypeProject          ApplicationPermissionResourceType = "project"
	ApplicationPermissionResourceTypeLogcialPartition ApplicationPermissionResourceType = "logcial-partition"
	ApplicationPermissionResourceTypeServiceItem      ApplicationPermissionResourceType = "service-item"
)

func (e *ApplicationPermissionResourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApplicationPermissionResourceType(s)
	case string:
		*e = ApplicationPermissionResourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for ApplicationPermissionResourceType: %T", src)
	}
	return nil
}

type NullApplicationPermissionResourceType struct {
	ApplicationPermissionResourceType ApplicationPermissionResourceType `json:"applicationPermissionResourceType"`
	Valid                             bool                              `json:"valid"` // Valid is true if ApplicationPermissionResourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApplicationPermissionResourceType) Scan(value interface{}) error {
	if value == nil {
		ns.ApplicationPermissionResourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApplicationPermissionResourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApplicationPermissionResourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApplicationPermissionResourceType), nil
}

type GlobalMediaStatus string

const (
	GlobalMediaStatusPending   GlobalMediaStatus = "pending"
	GlobalMediaStatusFailed    GlobalMediaStatus = "failed"
	GlobalMediaStatusCompleted GlobalMediaStatus = "completed"
)

func (e *GlobalMediaStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GlobalMediaStatus(s)
	case string:
		*e = GlobalMediaStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for GlobalMediaStatus: %T", src)
	}
	return nil
}

type NullGlobalMediaStatus struct {
	GlobalMediaStatus GlobalMediaStatus `json:"globalMediaStatus"`
	Valid             bool              `json:"valid"` // Valid is true if GlobalMediaStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGlobalMediaStatus) Scan(value interface{}) error {
	if value == nil {
		ns.GlobalMediaStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GlobalMediaStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGlobalMediaStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GlobalMediaStatus), nil
}

type GlobalMediaType string

const (
	GlobalMediaTypeImage GlobalMediaType = "image"
	GlobalMediaTypeVideo GlobalMediaType = "video"
	GlobalMediaTypeOther GlobalMediaType = "other"
)

func (e *GlobalMediaType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GlobalMediaType(s)
	case string:
		*e = GlobalMediaType(s)
	default:
		return fmt.Errorf("unsupported scan type for GlobalMediaType: %T", src)
	}
	return nil
}

type NullGlobalMediaType struct {
	GlobalMediaType GlobalMediaType `json:"globalMediaType"`
	Valid           bool            `json:"valid"` // Valid is true if GlobalMediaType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGlobalMediaType) Scan(value interface{}) error {
	if value == nil {
		ns.GlobalMediaType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GlobalMediaType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGlobalMediaType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GlobalMediaType), nil
}

type GlobalServiceHierarchyResult string

const (
	GlobalServiceHierarchyResultHierarchy GlobalServiceHierarchyResult = "hierarchy"
	GlobalServiceHierarchyResultItem      GlobalServiceHierarchyResult = "item"
)

func (e *GlobalServiceHierarchyResult) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GlobalServiceHierarchyResult(s)
	case string:
		*e = GlobalServiceHierarchyResult(s)
	default:
		return fmt.Errorf("unsupported scan type for GlobalServiceHierarchyResult: %T", src)
	}
	return nil
}

type NullGlobalServiceHierarchyResult struct {
	GlobalServiceHierarchyResult GlobalServiceHierarchyResult `json:"globalServiceHierarchyResult"`
	Valid                        bool                         `json:"valid"` // Valid is true if GlobalServiceHierarchyResult is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGlobalServiceHierarchyResult) Scan(value interface{}) error {
	if value == nil {
		ns.GlobalServiceHierarchyResult, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GlobalServiceHierarchyResult.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGlobalServiceHierarchyResult) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GlobalServiceHierarchyResult), nil
}

type GlobalServiceHierarchyType string

const (
	GlobalServiceHierarchyTypeLevel GlobalServiceHierarchyType = "level"
	GlobalServiceHierarchyTypeTree  GlobalServiceHierarchyType = "tree"
)

func (e *GlobalServiceHierarchyType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GlobalServiceHierarchyType(s)
	case string:
		*e = GlobalServiceHierarchyType(s)
	default:
		return fmt.Errorf("unsupported scan type for GlobalServiceHierarchyType: %T", src)
	}
	return nil
}

type NullGlobalServiceHierarchyType struct {
	GlobalServiceHierarchyType GlobalServiceHierarchyType `json:"globalServiceHierarchyType"`
	Valid                      bool                       `json:"valid"` // Valid is true if GlobalServiceHierarchyType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGlobalServiceHierarchyType) Scan(value interface{}) error {
	if value == nil {
		ns.GlobalServiceHierarchyType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GlobalServiceHierarchyType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGlobalServiceHierarchyType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GlobalServiceHierarchyType), nil
}

type GlobalServiceLogicalPartitionType string

const (
	GlobalServiceLogicalPartitionTypeHierarchy GlobalServiceLogicalPartitionType = "hierarchy"
	GlobalServiceLogicalPartitionTypeNone      GlobalServiceLogicalPartitionType = "none"
)

func (e *GlobalServiceLogicalPartitionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GlobalServiceLogicalPartitionType(s)
	case string:
		*e = GlobalServiceLogicalPartitionType(s)
	default:
		return fmt.Errorf("unsupported scan type for GlobalServiceLogicalPartitionType: %T", src)
	}
	return nil
}

type NullGlobalServiceLogicalPartitionType struct {
	GlobalServiceLogicalPartitionType GlobalServiceLogicalPartitionType `json:"globalServiceLogicalPartitionType"`
	Valid                             bool                              `json:"valid"` // Valid is true if GlobalServiceLogicalPartitionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGlobalServiceLogicalPartitionType) Scan(value interface{}) error {
	if value == nil {
		ns.GlobalServiceLogicalPartitionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GlobalServiceLogicalPartitionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGlobalServiceLogicalPartitionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GlobalServiceLogicalPartitionType), nil
}

type GlobalUserStatus string

const (
	GlobalUserStatusDisabled GlobalUserStatus = "disabled"
	GlobalUserStatusEnabled  GlobalUserStatus = "enabled"
)

func (e *GlobalUserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GlobalUserStatus(s)
	case string:
		*e = GlobalUserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for GlobalUserStatus: %T", src)
	}
	return nil
}

type NullGlobalUserStatus struct {
	GlobalUserStatus GlobalUserStatus `json:"globalUserStatus"`
	Valid            bool             `json:"valid"` // Valid is true if GlobalUserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGlobalUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.GlobalUserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GlobalUserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGlobalUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GlobalUserStatus), nil
}

type ManagementPermissionResourceType string

const (
	ManagementPermissionResourceTypeOrganization ManagementPermissionResourceType = "organization"
)

func (e *ManagementPermissionResourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ManagementPermissionResourceType(s)
	case string:
		*e = ManagementPermissionResourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for ManagementPermissionResourceType: %T", src)
	}
	return nil
}

type NullManagementPermissionResourceType struct {
	ManagementPermissionResourceType ManagementPermissionResourceType `json:"managementPermissionResourceType"`
	Valid                            bool                             `json:"valid"` // Valid is true if ManagementPermissionResourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullManagementPermissionResourceType) Scan(value interface{}) error {
	if value == nil {
		ns.ManagementPermissionResourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ManagementPermissionResourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullManagementPermissionResourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ManagementPermissionResourceType), nil
}

type ApplicationPermission struct {
	Key               string                              `json:"key"`
	ServiceName       string                              `json:"serviceName"`
	Name              string                              `json:"name"`
	Description       pgtype.Text                         `json:"description"`
	RequiredResources []ApplicationPermissionResourceType `json:"requiredResources"`
	CreatedAt         pgtype.Timestamptz                  `json:"createdAt"`
	UpdatedAt         pgtype.Timestamptz                  `json:"updatedAt"`
}

type ArchiveDeletedRecord struct {
	ID        pgtype.UUID        `json:"id"`
	TableName string             `json:"tableName"`
	Record    []byte             `json:"record"`
	DeletedAt pgtype.Timestamptz `json:"deletedAt"`
}

type GlobalMediaImage struct {
	MediaID  pgtype.UUID               `json:"mediaId"`
	Variants models.MediaImageVariants `json:"variants"`
	Status   GlobalMediaStatus         `json:"status"`
}

type GlobalMediaVideo struct {
	MediaID          pgtype.UUID       `json:"mediaId"`
	Thumbnail        pgtype.Text       `json:"thumbnail"`
	AdaptiveManifest pgtype.Text       `json:"adaptiveManifest"`
	Preview          pgtype.Text       `json:"preview"`
	Status           GlobalMediaStatus `json:"status"`
}

type GlobalMedium struct {
	ID          pgtype.UUID        `json:"id"`
	BucketPath  string             `json:"bucketPath"`
	Size        int64              `json:"size"`
	MediaType   GlobalMediaType    `json:"mediaType"`
	ContentType pgtype.Text        `json:"contentType"`
	CreatedAt   pgtype.Timestamptz `json:"createdAt"`
}

type GlobalService struct {
	Name             string                            `json:"name"`
	Assignable       bool                              `json:"assignable"`
	LogicalPartition GlobalServiceLogicalPartitionType `json:"logicalPartition"`
	CreatedAt        pgtype.Timestamptz                `json:"createdAt"`
}

type GlobalServiceHierarchyDetail struct {
	ServiceName     string                       `json:"serviceName"`
	HierarchyName   string                       `json:"hierarchyName"`
	HierarchyType   GlobalServiceHierarchyType   `json:"hierarchyType"`
	HierarchyResult GlobalServiceHierarchyResult `json:"hierarchyResult"`
}

type GlobalUser struct {
	ID              pgtype.UUID        `json:"id"`
	Email           string             `json:"email"`
	NormalizedEmail string             `json:"normalizedEmail"`
	Name            string             `json:"name"`
	NormalizedName  string             `json:"normalizedName"`
	About           pgtype.Text        `json:"about"`
	DateOfBirth     pgtype.Date        `json:"dateOfBirth"`
	Status          GlobalUserStatus   `json:"status"`
	CreatedAt       pgtype.Timestamptz `json:"createdAt"`
	LastAccessed    pgtype.Timestamptz `json:"lastAccessed"`
}

type ManagementPermission struct {
	Key               string                             `json:"key"`
	ServiceName       string                             `json:"serviceName"`
	Name              string                             `json:"name"`
	Description       pgtype.Text                        `json:"description"`
	RequiredResources []ManagementPermissionResourceType `json:"requiredResources"`
	CreatedAt         pgtype.Timestamptz                 `json:"createdAt"`
	UpdatedAt         pgtype.Timestamptz                 `json:"updatedAt"`
}
