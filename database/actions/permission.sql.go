// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: permission.sql

package db_actions

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addApplicationPermission = `-- name: AddApplicationPermission :exec
INSERT INTO
	application.permissions (
		key,
		service_name,
		name,
		description,
		required_resources
	)
VALUES
	($1, $2, $3, $4, $5)
ON CONFLICT (key) DO UPDATE
SET
	name = excluded.name,
	description = excluded.description
`

type AddApplicationPermissionParams struct {
	Key               string                              `json:"key"`
	ServiceName       string                              `json:"service_name"`
	Name              string                              `json:"name"`
	Description       pgtype.Text                         `json:"description"`
	RequiredResources []ApplicationPermissionResourceType `json:"required_resources"`
}

func (q *Queries) AddApplicationPermission(ctx context.Context, arg AddApplicationPermissionParams) error {
	_, err := q.db.Exec(ctx, addApplicationPermission,
		arg.Key,
		arg.ServiceName,
		arg.Name,
		arg.Description,
		arg.RequiredResources,
	)
	return err
}

const addManagementPermission = `-- name: AddManagementPermission :exec
INSERT INTO
	management.permissions (
		key,
		service_name,
		name,
		description,
		required_resources
	)
VALUES
	($1, $2, $3, $4, $5)
ON CONFLICT (key) DO UPDATE
SET
	name = excluded.name,
	description = excluded.description
`

type AddManagementPermissionParams struct {
	Key               string                             `json:"key"`
	ServiceName       string                             `json:"service_name"`
	Name              string                             `json:"name"`
	Description       pgtype.Text                        `json:"description"`
	RequiredResources []ManagementPermissionResourceType `json:"required_resources"`
}

func (q *Queries) AddManagementPermission(ctx context.Context, arg AddManagementPermissionParams) error {
	_, err := q.db.Exec(ctx, addManagementPermission,
		arg.Key,
		arg.ServiceName,
		arg.Name,
		arg.Description,
		arg.RequiredResources,
	)
	return err
}

const batchAddApplicationPermission = `-- name: BatchAddApplicationPermission :exec
WITH
	input_permissions AS (
		SELECT
			jsonb_array_elements(
				$1::JSONB
			) AS perm
	),
	expanded_permissions AS (
		SELECT
			perm ->> 'key' AS key,
			perm ->> 'service_name' AS service_name,
			perm ->> 'name' AS name,
			perm ->> 'description' AS description,
			ARRAY(
				SELECT
					jsonb_array_elements_text(
						perm -> 'required_resources'
					)::application.permission_resource_type
			) AS required_resources
		FROM
			input_permissions
	)
INSERT INTO
	application.permissions (
		key,
		service_name,
		name,
		description,
		required_resources
	)
SELECT
	key,
	service_name,
	name,
	description,
	required_resources
FROM
	expanded_permissions
ON CONFLICT (key) DO UPDATE
SET
	name = excluded.name,
	description = excluded.description
`

func (q *Queries) BatchAddApplicationPermission(ctx context.Context, permissions []byte) error {
	_, err := q.db.Exec(ctx, batchAddApplicationPermission, permissions)
	return err
}

const batchAddManagementPermission = `-- name: BatchAddManagementPermission :exec
WITH
	input_permissions AS (
		SELECT
			jsonb_array_elements(
				$1::JSONB
			) AS perm
	),
	expanded_permissions AS (
		SELECT
			perm ->> 'key' AS key,
			perm ->> 'service_name' AS service_name,
			perm ->> 'name' AS name,
			perm ->> 'description' AS description,
			ARRAY(
				SELECT
					jsonb_array_elements_text(
						perm -> 'required_resources'
					)::management.permission_resource_type
			) AS required_resources
		FROM
			input_permissions
	)
INSERT INTO
	management.permissions (
		key,
		service_name,
		name,
		description,
		required_resources
	)
SELECT
	key,
	service_name,
	name,
	description,
	required_resources
FROM
	expanded_permissions
ON CONFLICT (key) DO UPDATE
SET
	name = excluded.name,
	description = excluded.description
`

func (q *Queries) BatchAddManagementPermission(ctx context.Context, permissions []byte) error {
	_, err := q.db.Exec(ctx, batchAddManagementPermission, permissions)
	return err
}
