// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: permission.sql

package db_actions

import (
	"context"

	"github.com/google/uuid"
)

const addApplicationPermission = `-- name: AddApplicationPermission :exec
INSERT INTO
	application.permissions (
		key,
		service_id,
		name,
		description,
		required_resources
	)
VALUES
	($1, $2, $3, $4, $5)
ON CONFLICT (key) DO UPDATE
SET
	name = excluded.name,
	description = excluded.description
`

type AddApplicationPermissionParams struct {
	Key               string    `json:"key"`
	ServiceID         uuid.UUID `json:"serviceId"`
	Name              string    `json:"name"`
	Description       *string   `json:"description"`
	RequiredResources []string  `json:"requiredResources"`
}

func (q *Queries) AddApplicationPermission(ctx context.Context, arg AddApplicationPermissionParams) error {
	_, err := q.db.Exec(ctx, addApplicationPermission,
		arg.Key,
		arg.ServiceID,
		arg.Name,
		arg.Description,
		arg.RequiredResources,
	)
	return err
}

const addManagementPermission = `-- name: AddManagementPermission :exec
INSERT INTO
	management.permissions (
		key,
		service_id,
		name,
		description,
		required_resources
	)
VALUES
	($1, $2, $3, $4, $5)
ON CONFLICT (key) DO UPDATE
SET
	name = excluded.name,
	description = excluded.description
`

type AddManagementPermissionParams struct {
	Key               string    `json:"key"`
	ServiceID         uuid.UUID `json:"serviceId"`
	Name              string    `json:"name"`
	Description       *string   `json:"description"`
	RequiredResources []string  `json:"requiredResources"`
}

func (q *Queries) AddManagementPermission(ctx context.Context, arg AddManagementPermissionParams) error {
	_, err := q.db.Exec(ctx, addManagementPermission,
		arg.Key,
		arg.ServiceID,
		arg.Name,
		arg.Description,
		arg.RequiredResources,
	)
	return err
}
