// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: global_users.sql

package db_actions

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getGlobalUsersByQuery = `-- name: GetGlobalUsersByQuery :many
SELECT
	users.id,
	users.email,
	users.name,
	users.about,
	users.date_of_birth,
	users.created_at,
	jsonb_build_object(
		'originalProfile',
		media.bucket_path,
		'status',
		image.status,
		'variants',
		image.variants
	) AS profile_picture
FROM
	global.users AS users
	LEFT JOIN global.media AS media ON media.id = users.profile_picture_id
	LEFT JOIN global.media_image AS image ON media.id = image.media_id
WHERE
	users.normalized_name ILIKE '%' || unaccent (
		$2::TEXT
	) || '%'
	OR users.normalized_email ILIKE '%' || unaccent (
		$2::TEXT
	) || '%'
ORDER BY
	users.created_at DESC
LIMIT
	$1
`

type GetGlobalUsersByQueryParams struct {
	Limit int32  `json:"limit"`
	Query string `json:"query"`
}

type GetGlobalUsersByQueryRow struct {
	ID             pgtype.UUID        `json:"id"`
	Email          string             `json:"email"`
	Name           string             `json:"name"`
	About          pgtype.Text        `json:"about"`
	DateOfBirth    pgtype.Date        `json:"dateOfBirth"`
	CreatedAt      pgtype.Timestamptz `json:"createdAt"`
	ProfilePicture []byte             `json:"profilePicture"`
}

func (q *Queries) GetGlobalUsersByQuery(ctx context.Context, arg GetGlobalUsersByQueryParams) ([]GetGlobalUsersByQueryRow, error) {
	rows, err := q.db.Query(ctx, getGlobalUsersByQuery, arg.Limit, arg.Query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGlobalUsersByQueryRow
	for rows.Next() {
		var i GetGlobalUsersByQueryRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.About,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.ProfilePicture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalUsersFromNextCursor = `-- name: GetGlobalUsersFromNextCursor :many
SELECT
	users.id,
	users.email,
	users.name,
	users.about,
	users.date_of_birth,
	users.created_at,
	jsonb_build_object(
		'originalProfile',
		media.bucket_path,
		'status',
		image.status,
		'variants',
		image.variants
	) AS profile_picture
FROM
	global.users AS users
	LEFT JOIN global.media AS media ON media.id = users.profile_picture_id
	LEFT JOIN global.media_image AS image ON media.id = image.media_id
WHERE
	users.created_at < $2::TIMESTAMPTZ
ORDER BY
	users.created_at DESC
LIMIT
	$1
`

type GetGlobalUsersFromNextCursorParams struct {
	Limit      int32              `json:"limit"`
	NextCursor pgtype.Timestamptz `json:"nextCursor"`
}

type GetGlobalUsersFromNextCursorRow struct {
	ID             pgtype.UUID        `json:"id"`
	Email          string             `json:"email"`
	Name           string             `json:"name"`
	About          pgtype.Text        `json:"about"`
	DateOfBirth    pgtype.Date        `json:"dateOfBirth"`
	CreatedAt      pgtype.Timestamptz `json:"createdAt"`
	ProfilePicture []byte             `json:"profilePicture"`
}

func (q *Queries) GetGlobalUsersFromNextCursor(ctx context.Context, arg GetGlobalUsersFromNextCursorParams) ([]GetGlobalUsersFromNextCursorRow, error) {
	rows, err := q.db.Query(ctx, getGlobalUsersFromNextCursor, arg.Limit, arg.NextCursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGlobalUsersFromNextCursorRow
	for rows.Next() {
		var i GetGlobalUsersFromNextCursorRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.About,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.ProfilePicture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalUsersFromNextCursorOldestFirst = `-- name: GetGlobalUsersFromNextCursorOldestFirst :many
SELECT
	users.id,
	users.email,
	users.name,
	users.about,
	users.date_of_birth,
	users.created_at,
	jsonb_build_object(
		'originalProfile',
		media.bucket_path,
		'status',
		image.status,
		'variants',
		image.variants
	) AS profile_picture
FROM
	global.users AS users
	LEFT JOIN global.media AS media ON media.id = users.profile_picture_id
	LEFT JOIN global.media_image AS image ON media.id = image.media_id
WHERE
	users.created_at > $2::TIMESTAMPTZ
ORDER BY
	users.created_at ASC
LIMIT
	$1
`

type GetGlobalUsersFromNextCursorOldestFirstParams struct {
	Limit      int32              `json:"limit"`
	NextCursor pgtype.Timestamptz `json:"nextCursor"`
}

type GetGlobalUsersFromNextCursorOldestFirstRow struct {
	ID             pgtype.UUID        `json:"id"`
	Email          string             `json:"email"`
	Name           string             `json:"name"`
	About          pgtype.Text        `json:"about"`
	DateOfBirth    pgtype.Date        `json:"dateOfBirth"`
	CreatedAt      pgtype.Timestamptz `json:"createdAt"`
	ProfilePicture []byte             `json:"profilePicture"`
}

func (q *Queries) GetGlobalUsersFromNextCursorOldestFirst(ctx context.Context, arg GetGlobalUsersFromNextCursorOldestFirstParams) ([]GetGlobalUsersFromNextCursorOldestFirstRow, error) {
	rows, err := q.db.Query(ctx, getGlobalUsersFromNextCursorOldestFirst, arg.Limit, arg.NextCursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGlobalUsersFromNextCursorOldestFirstRow
	for rows.Next() {
		var i GetGlobalUsersFromNextCursorOldestFirstRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.About,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.ProfilePicture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalUsersFromPrevCursor = `-- name: GetGlobalUsersFromPrevCursor :many
SELECT
	users.id,
	users.email,
	users.name,
	users.about,
	users.date_of_birth,
	users.created_at,
	jsonb_build_object(
		'originalProfile',
		media.bucket_path,
		'status',
		image.status,
		'variants',
		image.variants
	) AS profile_picture
FROM
	global.users AS users
	LEFT JOIN global.media AS media ON media.id = users.profile_picture_id
	LEFT JOIN global.media_image AS image ON media.id = image.media_id
WHERE
	users.created_at > $2::TIMESTAMPTZ
ORDER BY
	users.created_at DESC
LIMIT
	$1
`

type GetGlobalUsersFromPrevCursorParams struct {
	Limit      int32              `json:"limit"`
	PrevCursor pgtype.Timestamptz `json:"prevCursor"`
}

type GetGlobalUsersFromPrevCursorRow struct {
	ID             pgtype.UUID        `json:"id"`
	Email          string             `json:"email"`
	Name           string             `json:"name"`
	About          pgtype.Text        `json:"about"`
	DateOfBirth    pgtype.Date        `json:"dateOfBirth"`
	CreatedAt      pgtype.Timestamptz `json:"createdAt"`
	ProfilePicture []byte             `json:"profilePicture"`
}

func (q *Queries) GetGlobalUsersFromPrevCursor(ctx context.Context, arg GetGlobalUsersFromPrevCursorParams) ([]GetGlobalUsersFromPrevCursorRow, error) {
	rows, err := q.db.Query(ctx, getGlobalUsersFromPrevCursor, arg.Limit, arg.PrevCursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGlobalUsersFromPrevCursorRow
	for rows.Next() {
		var i GetGlobalUsersFromPrevCursorRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.About,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.ProfilePicture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalUsersFromPrevCursorOldestFirst = `-- name: GetGlobalUsersFromPrevCursorOldestFirst :many
SELECT
	users.id,
	users.email,
	users.name,
	users.about,
	users.date_of_birth,
	users.created_at,
	jsonb_build_object(
		'originalProfile',
		media.bucket_path,
		'status',
		image.status,
		'variants',
		image.variants
	) AS profile_picture
FROM
	global.users AS users
	LEFT JOIN global.media AS media ON media.id = users.profile_picture_id
	LEFT JOIN global.media_image AS image ON media.id = image.media_id
WHERE
	users.created_at < $2::TIMESTAMPTZ
ORDER BY
	users.created_at ASC
LIMIT
	$1
`

type GetGlobalUsersFromPrevCursorOldestFirstParams struct {
	Limit      int32              `json:"limit"`
	PrevCursor pgtype.Timestamptz `json:"prevCursor"`
}

type GetGlobalUsersFromPrevCursorOldestFirstRow struct {
	ID             pgtype.UUID        `json:"id"`
	Email          string             `json:"email"`
	Name           string             `json:"name"`
	About          pgtype.Text        `json:"about"`
	DateOfBirth    pgtype.Date        `json:"dateOfBirth"`
	CreatedAt      pgtype.Timestamptz `json:"createdAt"`
	ProfilePicture []byte             `json:"profilePicture"`
}

func (q *Queries) GetGlobalUsersFromPrevCursorOldestFirst(ctx context.Context, arg GetGlobalUsersFromPrevCursorOldestFirstParams) ([]GetGlobalUsersFromPrevCursorOldestFirstRow, error) {
	rows, err := q.db.Query(ctx, getGlobalUsersFromPrevCursorOldestFirst, arg.Limit, arg.PrevCursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGlobalUsersFromPrevCursorOldestFirstRow
	for rows.Next() {
		var i GetGlobalUsersFromPrevCursorOldestFirstRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.About,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.ProfilePicture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT
	users.id,
	users.email,
	users.name,
	users.about,
	users.date_of_birth,
	jsonb_build_object(
		'originalProfile',
		media.bucket_path,
		'status',
		image.status,
		'variants',
		image.variants
	) AS profile_picture
FROM
	global.users AS users
	LEFT JOIN global.media AS media ON media.id = users.profile_picture_id
	LEFT JOIN global.media_image AS image ON media.id = image.media_id
WHERE
	users.id = $1::UUID
`

type GetUserByIdRow struct {
	ID             pgtype.UUID `json:"id"`
	Email          string      `json:"email"`
	Name           string      `json:"name"`
	About          pgtype.Text `json:"about"`
	DateOfBirth    pgtype.Date `json:"dateOfBirth"`
	ProfilePicture []byte      `json:"profilePicture"`
}

func (q *Queries) GetUserById(ctx context.Context, userID pgtype.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.About,
		&i.DateOfBirth,
		&i.ProfilePicture,
	)
	return i, err
}
