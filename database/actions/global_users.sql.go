// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: global_users.sql

package db_actions

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getGlobalUsersByQuery = `-- name: GetGlobalUsersByQuery :many
SELECT
	id, email, name, about, date_of_birth, created_at, profile_picture
FROM
	global.user_details
WHERE
	normalized_name ILIKE '%' || unaccent (
		$2::TEXT
	) || '%'
	OR normalized_email ILIKE '%' || unaccent (
		$2::TEXT
	) || '%'
ORDER BY
	created_at DESC
LIMIT
	$1
`

type GetGlobalUsersByQueryParams struct {
	Limit int32  `json:"limit"`
	Query string `json:"query"`
}

func (q *Queries) GetGlobalUsersByQuery(ctx context.Context, arg GetGlobalUsersByQueryParams) ([]GlobalUserDetail, error) {
	rows, err := q.db.Query(ctx, getGlobalUsersByQuery, arg.Limit, arg.Query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GlobalUserDetail
	for rows.Next() {
		var i GlobalUserDetail
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.About,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.ProfilePicture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalUsersFromNextCursor = `-- name: GetGlobalUsersFromNextCursor :many
SELECT
	id, email, name, about, date_of_birth, created_at, profile_picture
FROM
	global.user_details
WHERE
	created_at < $2::TIMESTAMPTZ
ORDER BY
	created_at DESC
LIMIT
	$1
`

type GetGlobalUsersFromNextCursorParams struct {
	Limit      int32              `json:"limit"`
	NextCursor pgtype.Timestamptz `json:"nextCursor"`
}

func (q *Queries) GetGlobalUsersFromNextCursor(ctx context.Context, arg GetGlobalUsersFromNextCursorParams) ([]GlobalUserDetail, error) {
	rows, err := q.db.Query(ctx, getGlobalUsersFromNextCursor, arg.Limit, arg.NextCursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GlobalUserDetail
	for rows.Next() {
		var i GlobalUserDetail
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.About,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.ProfilePicture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalUsersFromNextCursorOldestFirst = `-- name: GetGlobalUsersFromNextCursorOldestFirst :many
SELECT
	id, email, name, about, date_of_birth, created_at, profile_picture
FROM
	global.user_details
WHERE
	created_at > $2::TIMESTAMPTZ
ORDER BY
	created_at ASC
LIMIT
	$1
`

type GetGlobalUsersFromNextCursorOldestFirstParams struct {
	Limit      int32              `json:"limit"`
	NextCursor pgtype.Timestamptz `json:"nextCursor"`
}

func (q *Queries) GetGlobalUsersFromNextCursorOldestFirst(ctx context.Context, arg GetGlobalUsersFromNextCursorOldestFirstParams) ([]GlobalUserDetail, error) {
	rows, err := q.db.Query(ctx, getGlobalUsersFromNextCursorOldestFirst, arg.Limit, arg.NextCursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GlobalUserDetail
	for rows.Next() {
		var i GlobalUserDetail
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.About,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.ProfilePicture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalUsersFromPrevCursor = `-- name: GetGlobalUsersFromPrevCursor :many
SELECT
	id, email, name, about, date_of_birth, created_at, profile_picture
FROM
	global.user_details
WHERE
	created_at > $2::TIMESTAMPTZ
ORDER BY
	created_at DESC
LIMIT
	$1
`

type GetGlobalUsersFromPrevCursorParams struct {
	Limit      int32              `json:"limit"`
	PrevCursor pgtype.Timestamptz `json:"prevCursor"`
}

func (q *Queries) GetGlobalUsersFromPrevCursor(ctx context.Context, arg GetGlobalUsersFromPrevCursorParams) ([]GlobalUserDetail, error) {
	rows, err := q.db.Query(ctx, getGlobalUsersFromPrevCursor, arg.Limit, arg.PrevCursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GlobalUserDetail
	for rows.Next() {
		var i GlobalUserDetail
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.About,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.ProfilePicture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalUsersFromPrevCursorOldestFirst = `-- name: GetGlobalUsersFromPrevCursorOldestFirst :many
SELECT
	id, email, name, about, date_of_birth, created_at, profile_picture
FROM
	global.user_details
WHERE
	created_at < $2::TIMESTAMPTZ
ORDER BY
	created_at ASC
LIMIT
	$1
`

type GetGlobalUsersFromPrevCursorOldestFirstParams struct {
	Limit      int32              `json:"limit"`
	PrevCursor pgtype.Timestamptz `json:"prevCursor"`
}

func (q *Queries) GetGlobalUsersFromPrevCursorOldestFirst(ctx context.Context, arg GetGlobalUsersFromPrevCursorOldestFirstParams) ([]GlobalUserDetail, error) {
	rows, err := q.db.Query(ctx, getGlobalUsersFromPrevCursorOldestFirst, arg.Limit, arg.PrevCursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GlobalUserDetail
	for rows.Next() {
		var i GlobalUserDetail
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.About,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.ProfilePicture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT
	id, email, name, about, date_of_birth, created_at, profile_picture
FROM
	global.user_details
WHERE
	id = $1::UUID
`

func (q *Queries) GetUserById(ctx context.Context, userID pgtype.UUID) (GlobalUserDetail, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i GlobalUserDetail
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.About,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.ProfilePicture,
	)
	return i, err
}
